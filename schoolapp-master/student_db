DROP DATABASE StudentDatabase;
CREATE DATABASE StudentDatabase;
USE StudentDatabase;
CREATE TABLE `Student`(`id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,  `first_name` VARCHAR(50) NOT NULL, `last_name` VARCHAR(50) NOT NULL, `age` INT(2) NOT NULL, `dob` DATE NOT NULL, `email_id` VARCHAR(60), `phone_no` CHAR(10));
CREATE TABLE `Parent`( `id` INT UNSIGNED AUTO_INCREMENT NOT NULL, `first_name` VARCHAR(50) NOT NULL, `last_name` VARCHAR(50) NOT NULL, `relation` VARCHAR(10) NOT NULL, `profession` VARCHAR(200), `email_id` VARCHAR(60), `phone_no` CHAR(10),`no_of_children` INT(1) DEFAULT 1, `sec_password` VARCHAR(20) DEFAULT 'password', PRIMARY KEY(`id`,`relation`));
CREATE TABLE `Teacher`(`id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, `first_name` VARCHAR(50) NOT NULL, `last_name` VARCHAR(50) NOT NULL, `qualification` VARCHAR(20) NOT NULL, `email_id` VARCHAR(60), `phone_no` CHAR(10) NOT NULL);
Create Table `Class`( `class_no` INT(2) UNSIGNED NOT NULL, `section` CHAR(1) NOT NULL, `strength` INT UNSIGNED NOT NULL, PRIMARY KEY(`class_no`,`section`));
Create Table `Book`( `id` VARCHAR(10) NOT NULL PRIMARY KEY, `title` VARCHAR(50) NOT NULL, `author` VARCHAR(30), `description` VARCHAR(1000) NOT NULL);
CREATE Table `Event`( `name` VARCHAR(30) NOT NULL, `description` VARCHAR(1000) NOT NULL, `start_time` DATETIME NOT NULL, `end_time` DATETIME NOT NULL, `venue` VARCHAR(30) NOT NULL, PRIMARY KEY(`start_time`,`end_time`,`venue`));
CREATE TABLE `Subject`( `name` VARCHAR(20) NOT NULL PRIMARY KEY);
CREATE TABLE `Attendance`( `student_id` INT(10) UNSIGNED NOT NULL, `date` DATE NOT NULL, `P_A` CHAR(1) NOT NULL, PRIMARY KEY(`student_id`,`date`), FOREIGN KEY(`student_id`) REFERENCES `Student`(`id`));
CREATE TABLE `ClassTeacher`( `class_no` INT UNSIGNED NOT NULL, `section` CHAR(1) NOT NULL, `teacher_id` INT UNSIGNED NOT NULL, PRIMARY KEY(`class_no`,`section`), FOREIGN KEY(`class_no`,`section`) REFERENCES `Class`(`class_no`,`section`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`teacher_id`) REFERENCES `Teacher`(`id`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `StudentClass`( `student_id` INT UNSIGNED NOT NULL, `class_no` INT UNSIGNED NOT NULL, `section` CHAR(1) NOT NULL, PRIMARY KEY(`student_id`), FOREIGN KEY(`student_id`) REFERENCES `Student`(`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`class_no`,`section`) REFERENCES `Class`(`class_no`,`section`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `StudentParent`( `student_id` INT UNSIGNED NOT NULL, `parent_id` INT UNSIGNED NOT NULL, PRIMARY KEY(`student_id`), FOREIGN KEY(`student_id`) REFERENCES `Student`(`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`parent_id`) REFERENCES `Parent`(`id`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `SubjectBookClass`( `class_no` INT UNSIGNED NOT NULL, `subject` VARCHAR(20) NOT NULL, `book_id` VARCHAR(10) NOT NULL, PRIMARY KEY(`class_no`,`book_id`), FOREIGN KEY(`class_no`) REFERENCES `Class`(`class_no`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`book_id`) REFERENCES `Book`(`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`subject`) REFERENCES `Subject`(`name`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `MedicalRecord`( `student_id` INT UNSIGNED NOT NULL, `blood_group` VARCHAR(3) NOT NULL, `height` INT UNSIGNED NOT NULL, `weight` INT UNSIGNED NOT NULL, `allergies` VARCHAR(50), PRIMARY KEY(`student_id`), FOREIGN KEY(`student_id`) REFERENCES `Student`(`id`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `Grade`( `student_id` INT UNSIGNED NOT NULL, `subject` VARCHAR(20) NOT NULL, `marks` INT NOT NULL, `exam` VARCHAR(30) NOT NULL, PRIMARY KEY(`student_id`,`subject`,`exam`), FOREIGN KEY(`student_id`) REFERENCES `Student`(`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`subject`) REFERENCES `Subject`(`name`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `TimeSlot`( `slot_no` INT UNSIGNED NOT NULL, `start_time` TIME NOT NULL UNIQUE, `end_time` TIME NOT NULL UNIQUE, PRIMARY KEY(`slot_no`));
CREATE TABLE `TimeTable`( `day` CHAR(3) NOT NULL, `slot` INT UNSIGNED NOT NULL,`class_no` INT(2) UNSIGNED NOT NULL, `section` CHAR(1) NOT NULL, `teacher_id` INT UNSIGNED NOT NULL, `subject` VARCHAR(20) NOT NULL, PRIMARY KEY(`day`, `slot`, `class_no`, `section`), FOREIGN KEY(`slot`) REFERENCES `TimeSlot`(`slot_no`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`class_no`,`section`) REFERENCES `Class`(`class_no`,`section`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`teacher_id`) REFERENCES `Teacher`(`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY(`subject`) REFERENCES `Subject`(`name`) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE `UserTable`( `name` VARCHAR(10) NOT NULL PRIMARY KEY);
CREATE TABLE `User`( `id` INT UNSIGNED NOT NULL, `table` VARCHAR(10) NOT NULL, `username` VARCHAR(20) DEFAULT 'username', `password` VARCHAR(20) DEFAULT 'password', PRIMARY KEY(`username`), FOREIGN KEY(`table`) REFERENCES `UserTable`(`name`));
delimiter //
CREATE TRIGGER s_check_insert BEFORE INSERT ON Student FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = NULL; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'phone no invalid!!'; END IF; IF NEW.age NOT BETWEEN 5 AND 20 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'age invalid!!'; END IF;  END;//
CREATE TRIGGER s_check_update BEFORE UPDATE ON Student FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = OLD.email_id; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SET NEW.phone_no = OLD.phone_no; END IF; IF NEW.age NOT BETWEEN 5 AND 20 THEN SET NEW.age = OLD.age; END IF; END;//
CREATE TRIGGER p_check_insert BEFORE INSERT ON Parent FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = NULL; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'phone no invalid!!'; END IF; END;//
CREATE TRIGGER p_check_update BEFORE UPDATE ON Parent FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = OLD.email_id; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SET NEW.phone_no = OLD.phone_no; END IF; END;//
CREATE TRIGGER t_check_insert BEFORE INSERT ON Teacher FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = NULL; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'phone no invalid!!'; END IF; END;//
CREATE TRIGGER t_check_update BEFORE UPDATE ON Teacher FOR EACH ROW BEGIN IF NEW.email_id NOT LIKE '%@%.%' THEN SET NEW.email_id = OLD.email_id; END IF; IF NEW.phone_no NOT REGEXP '^-?[0-9]+$' THEN SET NEW.phone_no = OLD.phone_no; END IF; END;//
CREATE TRIGGER c_check_insert BEFORE INSERT ON Class FOR EACH ROW BEGIN IF NEW.class_no NOT BETWEEN 1 AND 12 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'class no invalid!!'; END IF; END;//
CREATE TRIGGER c_check_update BEFORE UPDATE ON Class FOR EACH ROW BEGIN IF NEW.class_no NOT BETWEEN 1 AND 12 THEN SET NEW.class_no = OLD.class_no; END IF; END;//
CREATE TRIGGER e_check_insert BEFORE INSERT ON Event FOR EACH ROW BEGIN IF NEW.start_time > NEW.end_time THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'times are in reverse order!!'; END IF; END;//
CREATE TRIGGER e_check_update BEFORE UPDATE ON Event FOR EACH ROW BEGIN IF NEW.start_time > NEW.end_time THEN SET NEW.start_time = OLD.start_time; SET NEW.end_time = OLD.end_time; END IF; END;//
CREATE TRIGGER a_check_insert BEFORE INSERT ON Attendance FOR EACH ROW BEGIN IF NEW.P_A NOT IN ('P', 'A') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only valid entries are "P" and "A"!!'; END IF; END;//
CREATE TRIGGER a_check_update BEFORE UPDATE ON Attendance FOR EACH ROW BEGIN IF NEW.P_A NOT IN ('P', 'A') THEN SET NEW.P_A = OLD.P_A; END IF; END;//
CREATE TRIGGER m_check_insert BEFORE INSERT ON MedicalRecord FOR EACH ROW BEGIN IF NEW.blood_group NOT IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Blood group invalid!!'; END IF; END;//
CREATE TRIGGER m_check_update BEFORE UPDATE ON MedicalRecord FOR EACH ROW BEGIN IF NEW.blood_group NOT IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-') THEN SET NEW.blood_group = OLD.blood_group; END IF; END;//
CREATE TRIGGER ut_check_insert BEFORE INSERT ON UserTable FOR EACH ROW BEGIN IF NEW.name NOT IN ('Parent','Student','Teacher') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Entries can only be Parent,Student,Teacher!!'; END IF; END;//
CREATE TRIGGER ut_check_update BEFORE UPDATE ON UserTable FOR EACH ROW BEGIN IF NEW.name NOT IN ('Parent','Student','Teacher') THEN SET NEW.name = OLD.name; END IF; END;//
#CREATE TRIGGER u_check_insert BEFORE INSERT ON User FOR EACH ROW BEGIN SET T = SELECT SUBSTRING(NEW.table,1); IF NEW.id NOT IN (SELECT id FROM T) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Corresponding id is not present in the table!!'; END IF; END;//
#CREATE TRIGGER u_check_update BEFORE UPDATE ON User FOR EACH ROW BEGIN IF NEW.id NOT IN (SELECT id FROM NEW.table) THEN SET NEW.id = OLD.id; END IF; END;//
delimiter ;
INSERT INTO `UserTable` VALUES('Student');
INSERT INTO `UserTable` VALUES('Parent');
INSERT INTO `UserTable` VALUES('Teacher');
insert into Student values( 1 , 'Rajeev', 'Kumar', 20, '1993-11-12', 'raj@raj.com', '2435125');
insert into Student values( 2 , 'Lakshmi', 'Lahari', 17, '1996-09-29', 'lahu@lahu.com', '12345');
insert into Parent values( 1 , 'Vijay', 'Kumar', 'Father', 'Senior Manager, Canara Bank', 'vijayakumar@canarabank.com', '8978722336', 1, 'password');
insert into Parent values( 1 , 'Siva', 'Jyothi', 'Mother', 'House wife' , 'raj@raj.com', '9246353590', 2, 'password');
insert into Teacher values( 1 , 'qwer', 'tyui', 'B.Tech CSE', 'raj@raj.com', '2435125');
insert into StudentParent values(1,1);
insert into StudentParent values(2,1);
insert into User values( 1, 'Parent', 'p' , 'p');
insert into User values( 1, 'Teacher', 't' , 't');